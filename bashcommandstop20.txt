#!/bin/bash

# 1. `ls` - List files and directories in the current directory
echo "Listing files and directories:"
ls
echo

# 2. `cd` - Change to a new directory
echo "Creating and changing to a new directory 'test_dir':"
mkdir test_dir
cd test_dir
echo "Current directory: $(pwd)"
echo

# 3. `pwd` - Print the current working directory
echo "Printing the current directory:"
pwd
echo

# 4. `cp` - Copy a file
echo "Creating a file 'example.txt' and copying it to 'copy_example.txt':"
echo "This is a test file." > example.txt
cp example.txt copy_example.txt
ls
echo

# 5. `mv` - Move or rename a file
echo "Renaming 'copy_example.txt' to 'renamed_example.txt':"
mv copy_example.txt renamed_example.txt
ls
echo

# 6. `rm` - Remove a file
echo "Removing 'renamed_example.txt':"
rm renamed_example.txt
ls
echo

# 7. `mkdir` - Create a new directory
echo "Creating a subdirectory 'sub_dir':"
mkdir sub_dir
ls
echo

# 8. `rmdir` - Remove an empty directory
echo "Removing the empty subdirectory 'sub_dir':"
rmdir sub_dir
ls
echo

# 9. `touch` - Create an empty file or update the timestamp of an existing file
echo "Using 'touch' to create an empty file 'empty_file.txt':"
touch empty_file.txt
ls -l empty_file.txt
echo

# 10. `echo` - Display a line of text
echo "Displaying a message with 'echo':"
echo "Hello, Bash!"
echo

# 11. `cat` - Concatenate and display the content of files
echo "Displaying the content of 'example.txt':"
cat example.txt
echo

# 12. `less` - View the content of a file one screen at a time
echo "Viewing the content of 'example.txt' with 'less':"
less example.txt
echo

# 13. `grep` - Search for patterns within files
echo "Searching for the word 'test' in 'example.txt':"
grep "test" example.txt
echo

# 14. `find` - Search for files and directories in a directory hierarchy
echo "Finding files in the current directory:"
find .
echo

# 15. `chmod` - Change the permissions of a file
echo "Changing the permissions of 'example.txt' to read-only:"
chmod 444 example.txt
ls -l example.txt
echo

# 16. `chown` - Change the ownership of a file
echo "Changing ownership of 'example.txt' (root user required):"
# sudo chown root:root example.txt # Uncomment if running with root privileges
ls -l example.txt
echo

# 17. `ps` - Display information about running processes
echo "Displaying running processes:"
ps
echo

# 18. `top` - Display real-time system processes
echo "Displaying system processes with 'top' (press 'q' to quit):"
top -n 1
echo

# 19. `man` - Display the manual page for a command
echo "Displaying the manual page for the 'ls' command:"
man ls
echo

# 20. `exit` - Exit the script
echo "Exiting the script."
exit 0

---------------------------------------------------------------------------------------------------

Here’s a list of the top 20 most commonly used and important bash commands that are essential for beginners, along with the top 3 flags for each that a DevOps engineer might typically use:

### 1. **`ls`** - Lists directory contents
   - `-l` : Long listing format
   - `-a` : Show all files, including hidden ones
   - `-h` : Human-readable file sizes

### 2. **`cd`** - Changes the current directory
   - `~` : Home directory
   - `..` : Parent directory
   - `-` : Previous directory

### 3. **`pwd`** - Prints the working directory

### 4. **`cp`** - Copies files and directories
   - `-r` : Recursive copy (for directories)
   - `-i` : Prompt before overwrite
   - `-v` : Verbose mode

### 5. **`mv`** - Moves or renames files and directories
   - `-i` : Prompt before overwrite
   - `-v` : Verbose mode
   - `-n` : No clobber, don’t overwrite existing files

### 6. **`rm`** - Removes files or directories
   - `-r` : Recursive removal (for directories)
   - `-i` : Prompt before removal
   - `-f` : Force removal

### 7. **`mkdir`** - Creates directories
   - `-p` : Create parent directories as needed
   - `-v` : Verbose mode

### 8. **`rmdir`** - Removes empty directories
   - `--ignore-fail-on-non-empty` : Ignore errors when directory is not empty
   - `-p` : Remove directories and their parents

### 9. **`touch`** - Creates or updates file timestamps
   - `-a` : Change only access time
   - `-m` : Change only modification time
   - `-c` : Do not create any files

### 10. **`echo`** - Displays a line of text
   - `-e` : Enable interpretation of backslash escapes
   - `-n` : Do not output the trailing newline
   - `-E` : Disable interpretation of backslash escapes

### 11. **`cat`** - Concatenates and displays file content
   - `-n` : Number all output lines
   - `-E` : Display `$` at the end of each line
   - `-s` : Squeeze multiple blank lines

### 12. **`grep`** - Searches text using patterns
   - `-i` : Ignore case
   - `-r` : Recursive search
   - `-v` : Invert match

### 13. **`find`** - Searches for files in a directory hierarchy
   - `-name` : Search by name
   - `-type` : Search by type (e.g., `f` for files, `d` for directories)
   - `-exec` : Execute a command on the found items

### 14. **`chmod`** - Changes file permissions
   - `-R` : Recursive change
   - `-v` : Verbose mode
   - `--reference` : Use file or directory permissions as reference

### 15. **`chown`** - Changes file owner and group
   - `-R` : Recursive change
   - `-v` : Verbose mode
   - `--reference` : Use file or directory ownership as reference

### 16. **`ps`** - Displays information about active processes
   - `-aux` : Show all processes
   - `-ef` : Display processes in full-format listing
   - `-p` : Display processes by PID

### 17. **`kill`** - Sends a signal to a process
   - `-9` : Force kill
   - `-l` : List signal names
   - `-s` : Send specified signal

### 18. **`tar`** - Archives files
   - `-c` : Create a new archive
   - `-x` : Extract files from an archive
   - `-z` : Compress with gzip

### 19. **`ssh`** - Connects to a remote server via SSH
   - `-i` : Specify identity file
   - `-p` : Specify port
   - `-L` : Local port forwarding

### 20. **`df`** - Reports file system disk space usage
   - `-h` : Human-readable format
   - `-T` : Show file system type
   - `-i` : Display inode information

These commands and flags are foundational in Bash and widely used in day-to-day tasks, especially for system administration, DevOps, and development tasks.
