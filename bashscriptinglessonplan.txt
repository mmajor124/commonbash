# Bash Scripting Lesson Plan

[Previous content remains unchanged]

## Example Exercises

### Week 1: Introduction and Basics

#### Day 1: Introduction to Bash
Exercise: Create a simple script that prints "Hello, World!" and make it executable.
```bash
#!/bin/bash
echo "Hello, World!"
```

#### Day 2: Variables and Environment Variables
Exercise: Write a script that asks for the user's name and favorite color, then prints a personalized message using those variables.
```bash
#!/bin/bash
read -p "Enter your name: " name
read -p "Enter your favorite color: " color
echo "Hello, $name! Your favorite color is $color."
```

#### Day 3: Control Structures
Exercise: Create a script that asks the user for a number and then uses a loop to print the multiplication table for that number up to 10.
```bash
#!/bin/bash
read -p "Enter a number: " num
for i in {1..10}
do
    result=$((num * i))
    echo "$num x $i = $result"
done
```

### Week 2: Functions and Input/Output

#### Day 4: Functions
Exercise: Write a function that calculates the factorial of a given number.
```bash
#!/bin/bash
factorial() {
    if [ $1 -eq 0 ] || [ $1 -eq 1 ]; then
        echo 1
    else
        echo $(( $1 * $(factorial $(( $1 - 1 ))) ))
    fi
}

read -p "Enter a number: " num
result=$(factorial $num)
echo "The factorial of $num is $result"
```

#### Day 5: Input/Output and Redirection
Exercise: Create a script that reads a list of words from a file, sorts them, and writes the sorted list to a new file.
```bash
#!/bin/bash
input_file="words.txt"
output_file="sorted_words.txt"

sort < "$input_file" > "$output_file"
echo "Sorted words have been written to $output_file"
```

#### Day 6: File Handling and Text Processing
Exercise: Write a script that counts the occurrences of a specific word in a given text file.
```bash
#!/bin/bash
read -p "Enter the filename: " filename
read -p "Enter the word to search for: " search_word

count=$(grep -o -i "$search_word" "$filename" | wc -l)
echo "The word '$search_word' appears $count times in $filename"
```

### Week 3: Advanced Topics

#### Day 7: Regular Expressions
Exercise: Create a script that validates email addresses using regex.
```bash
#!/bin/bash
validate_email() {
    if [[ $1 =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$ ]]; then
        echo "Valid email address"
    else
        echo "Invalid email address"
    fi
}

read -p "Enter an email address: " email
validate_email "$email"
```

#### Day 8: Error Handling and Debugging
Exercise: Modify a previous script to include error handling for file operations and invalid input.
```bash
#!/bin/bash
set -e
trap 'echo "An error occurred. Exiting..."; exit 1' ERR

read -p "Enter the filename: " filename
read -p "Enter the word to search for: " search_word

if [ ! -f "$filename" ]; then
    echo "Error: File not found!"
    exit 1
fi

count=$(grep -o -i "$search_word" "$filename" | wc -l)
echo "The word '$search_word' appears $count times in $filename"
```

#### Day 9: Command-line Arguments and Arrays
Exercise: Write a script that takes multiple filenames as arguments and prints the number of lines in each file.
```bash
#!/bin/bash
if [ $# -eq 0 ]; then
    echo "Usage: $0 file1 [file2 ...]"
    exit 1
fi

for file in "$@"
do
    if [ -f "$file" ]; then
        lines=$(wc -l < "$file")
        echo "$file has $lines lines"
    else
        echo "Error: $file not found"
    fi
done
```

#### Day 10: String Manipulation and Arithmetic Operations
Exercise: Create a script that converts temperatures between Celsius and Fahrenheit.
```bash
#!/bin/bash
to_celsius() {
    echo "scale=2; ($1 - 32) * 5 / 9" | bc
}

to_fahrenheit() {
    echo "scale=2; ($1 * 9 / 5) + 32" | bc
}

read -p "Enter temperature: " temp
read -p "Convert to (C/F): " unit

if [ "$unit" = "C" ] || [ "$unit" = "c" ]; then
    result=$(to_celsius $temp)
    echo "$temp째F is $result째C"
elif [ "$unit" = "F" ] || [ "$unit" = "f" ]; then
    result=$(to_fahrenheit $temp)
    echo "$temp째C is $result째F"
else
    echo "Invalid unit. Please use C or F."
fi
```

### Week 4: Practical Applications

#### Day 11: Process Management
Exercise: Write a script that lists all running processes and allows the user to kill a process by entering its PID.
```bash
#!/bin/bash
ps aux
read -p "Enter PID to kill (or 'q' to quit): " pid

if [ "$pid" != "q" ]; then
    if kill -15 "$pid" 2>/dev/null; then
        echo "Process $pid terminated"
    else
        echo "Failed to terminate process $pid"
    fi
fi
```

#### Day 12: Scripting Best Practices
Exercise: Refactor a previous script to include proper documentation, error handling, and follow best practices.

#### Day 13-15: Project Work
Exercise: Create a system monitoring tool that:
1. Checks CPU usage
2. Monitors available disk space
3. Logs results to a file
4. Sends an alert if thresholds are exceeded

```bash
#!/bin/bash
# System Monitoring Tool

LOG_FILE="/var/log/system_monitor.log"
CPU_THRESHOLD=80
DISK_THRESHOLD=90

log_message() {
    echo "$(date): $1" >> "$LOG_FILE"
}

check_cpu() {
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
    if (( $(echo "$cpu_usage > $CPU_THRESHOLD" | bc -l) )); then
        log_message "ALERT: CPU usage is $cpu_usage%"
    else
        log_message "CPU usage is $cpu_usage%"
    fi
}

check_disk() {
    disk_usage=$(df -h / | awk 'NR==2 {print $5}' | cut -d'%' -f1)
    if [ "$disk_usage" -gt "$DISK_THRESHOLD" ]; then
        log_message "ALERT: Disk usage is $disk_usage%"
    else
        log_message "Disk usage is $disk_usage%"
    fi
}

# Main execution
check_cpu
check_disk

echo "System check complete. See $LOG_FILE for details."
```

These exercises provide practical, hands-on experience for each topic in the lesson plan. They progress from simple scripts to more complex ones, culminating in a multi-day project. Encourage students to expand on these exercises, experiment with different approaches, and create their own variations to deepen their understanding of Bash scripting.
